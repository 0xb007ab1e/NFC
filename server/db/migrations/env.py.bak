"""Alembic environment configuration."""
import os
import sys
from logging.config import fileConfig

from sqlalchemy import engine_from_config
from sqlalchemy import pool

from alembic import context

# Add the project root to the Python path and create the 'server' module reference
project_root = os.path.join(os.path.dirname(__file__), '../..')
sys.path.insert(0, project_root)

# Create a mock server module structure to handle imports
import types
server_module = types.ModuleType('server')
server_db_module = types.ModuleType('server.db')
server_db_models_module = types.ModuleType('server.db.models')
sys.modules['server'] = server_module
sys.modules['server.db'] = server_db_module
sys.modules['server.db.models'] = server_db_models_module

# Import the actual modules and add them to the server namespace
import db.config
import db.models.nfc_tag
import db.models.nfc_record
import db.models.device
import db.models.connection
import db.models.user

server_module.db = server_db_module
server_db_module.config = db.config
server_db_module.models = server_db_models_module
server_db_models_module.nfc_tag = db.models.nfc_tag
server_db_models_module.nfc_record = db.models.nfc_record
server_db_models_module.device = db.models.device
server_db_models_module.connection = db.models.connection
server_db_models_module.user = db.models.user

# Import the database configuration and models
from db.config import engine, Base
# Import all models to ensure they're registered with SQLAlchemy
from db.models.nfc_tag import NFCTag
from db.models.nfc_record import NFCRecord
from db.models.device import Device
from db.models.connection import Connection
from db.models.user import User

# this is the Alembic Config object, which provides
# access to the values within the .ini file in use.
config = context.config

# Interpret the config file for Python logging.
# This line sets up loggers basically.
if config.config_file_name is not None:
    fileConfig(config.config_file_name)

# add your model's MetaData object here
# for 'autogenerate' support
target_metadata = Base.metadata

# other values from the config, defined by the needs of env.py,
# can be acquired:
# my_important_option = config.get_main_option("my_important_option")
# ... etc.


def run_migrations_offline() -> None:
    """Run migrations in 'offline' mode.

    This configures the context with just a URL
    and not an Engine, though an Engine is acceptable
    here as well.  By skipping the Engine creation
    we don't even need a DBAPI to be available.

    Calls to context.execute() here emit the given string to the
    script output.

    """
    url = config.get_main_option("sqlalchemy.url")
    context.configure(
        url=url,
        target_metadata=target_metadata,
        literal_binds=True,
        dialect_opts={"paramstyle": "named"},
    )

    with context.begin_transaction():
        context.run_migrations()


def run_migrations_online() -> None:
    """Run migrations in 'online' mode.

    In this scenario we need to create an Engine
    and associate a connection with the context.

    """
    # Use the engine from our database configuration
    connectable = engine

    with connectable.connect() as connection:
        context.configure(
            connection=connection, target_metadata=target_metadata
        )

        with context.begin_transaction():
            context.run_migrations()


if context.is_offline_mode():
    run_migrations_offline()
else:
    run_migrations_online()
