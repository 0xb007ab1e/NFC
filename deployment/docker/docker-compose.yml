version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: nfc-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-nfc_system}
      POSTGRES_USER: ${POSTGRES_USER:-nfc_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-nfc_password}
      POSTGRES_HOST_AUTH_METHOD: ${POSTGRES_HOST_AUTH_METHOD:-md5}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - nfc-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-nfc_user} -d ${POSTGRES_DB:-nfc_system}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache (optional)
  redis:
    image: redis:7-alpine
    container_name: nfc-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - nfc-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # NFC Server Application
  nfc-server:
    build:
      context: ../../server
      dockerfile: ../deployment/docker/Dockerfile.server
      args:
        PYTHON_VERSION: ${PYTHON_VERSION:-3.11}
    container_name: nfc-server
    restart: unless-stopped
    environment:
      # Database Configuration
      DATABASE_URL: postgresql://${POSTGRES_USER:-nfc_user}:${POSTGRES_PASSWORD:-nfc_password}@db:5432/${POSTGRES_DB:-nfc_system}
      
      # Server Configuration
      NFC_SERVER_HOST: 0.0.0.0
      NFC_SERVER_PORT: 8000
      NFC_SERVER_LOG_LEVEL: ${LOG_LEVEL:-info}
      
      # Security
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-here}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY:-your-jwt-secret-key-here}
      JWT_ALGORITHM: HS256
      JWT_EXPIRE_MINUTES: ${JWT_EXPIRE_MINUTES:-30}
      
      # CORS
      CORS_ORIGINS: ${CORS_ORIGINS:-["http://localhost:3000","http://127.0.0.1:3000"]}
      
      # Redis (optional)
      REDIS_URL: redis://redis:6379/0
      
      # Environment
      ENVIRONMENT: ${ENVIRONMENT:-development}
      DEBUG: ${DEBUG:-true}
    ports:
      - "${SERVER_PORT:-8000}:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - nfc-network
    volumes:
      - server_logs:/app/logs
      - ./config:/app/config:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: nfc-nginx
    restart: unless-stopped
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - nfc-server
    networks:
      - nfc-network

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: nfc-prometheus
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - nfc-network

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: nfc-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: false
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - nfc-network

networks:
  nfc-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/24

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  server_logs:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
