name: Python CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10']

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        cd server
        python -m pip install --upgrade pip
        pip install flake8 pytest pytest-cov black mypy
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Set up temporary SQLite database for migrations
      run: |
        cd server
        # Create temporary database directory
        mkdir -p /tmp/test_db
        # Set environment variable for test database
        echo "DATABASE_URL=sqlite:///tmp/test_db/test.db" >> $GITHUB_ENV
    
    - name: Run Alembic migrations
      run: |
        cd server
        # Set database URL for testing
        export DATABASE_URL="sqlite:////tmp/test_db/test.db"
        # Run migrations using Python module
        python -m alembic -c db/migrations/alembic.ini upgrade head
    
    - name: Lint with flake8
      run: |
        cd server
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=100 --statistics
    
    - name: Format code with black
      run: |
        cd server
        black --line-length 100 .
        git config --global user.email "github-actions@github.com"
        git config --global user.name "GitHub Actions"
        git add .
        git diff --quiet && git diff --staged --quiet || git commit -m "Apply black formatting"
    
    - name: Type check with mypy
      run: |
        cd server
        # Skip mypy for now until package structure is fixed
        # mypy --ignore-missing-imports --explicit-package-bases .
        echo "Skipping mypy check for now"
    
    - name: Test with pytest
      run: |
        cd server
        pytest --cov=server --cov-report=xml:coverage.xml --cov-report=term --cov-fail-under=75
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./server/coverage.xml
        flags: server
        name: python-${{ matrix.python-version }}
        fail_ci_if_error: false

  build:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        cd server
        python -m pip install --upgrade pip
        pip install build wheel
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Build package
      run: |
        cd server
        python -m build
    
    - name: Archive production artifacts
      uses: actions/upload-artifact@v4
      with:
        name: server-package
        path: |
          server/dist/
          !server/dist/*.tar.gz
